package com.compomics.pladipus.view;

import java.awt.CardLayout;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JEditorPane;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Kenneth Verheggen
 */
public class InstallerGUI extends javax.swing.JFrame {

    /**
     * the current position of the cards
     */
    private int cursor = 1;
    /**
     * the collection of card names that can be displayed
     */
    private HashMap<Integer, String> cards = new HashMap<>();

    /**
     * Creates a new InstallerGUI.
     */
    public InstallerGUI() {
        initComponents();
        cards.put(1, "splashCard");
        cards.put(2, "mySQLCard");
        cards.put(3, "activeMQCard");
        cards.put(4, "pladipusCard");

        epDescription.setEditorKit(JEditorPane.createEditorKitForContentType("text/html"));
        epDescription.setEditable(false);
        epDescription.addHyperlinkListener(new HyperlinkListener() {
            @Override
            public void hyperlinkUpdate(HyperlinkEvent e) {
                if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                    if (Desktop.isDesktopSupported()) {
                        try {
                            Desktop.getDesktop().browse(e.getURL().toURI());
                        } catch (IOException | URISyntaxException ex) {
                            Logger.getLogger(InstallerGUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
        });

        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/pladipus_icon.gif")));

        //add listener to the index
        ListSelectionListener listSelectionListener = new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent listSelectionEvent) {
                cursor = liSteps.getSelectedIndex() + 1;
                showCard();
            }
        };
        liSteps.addListSelectionListener(listSelectionListener);

        setDescriptingText();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMain = new javax.swing.JPanel();
        btnNext = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        pnlCards = new javax.swing.JPanel();
        pnlSplash = new com.compomics.pladipus.view.SplashPanel();
        pnlMySQL = new com.compomics.pladipus.view.MySQLPanel();
        pnlActiveMQ = new com.compomics.pladipus.view.ActiveMQPanel();
        pnlPladipus = new com.compomics.pladipus.view.PladipusPanel();
        pnlSteps = new javax.swing.JPanel();
        pnlDescription = new javax.swing.JPanel();
        spnlDescription = new javax.swing.JScrollPane();
        epDescription = new javax.swing.JEditorPane();
        liSteps = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        pnlMain.setBackground(new java.awt.Color(255, 255, 255));

        btnNext.setText("Next");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnPrev.setText("Previous");
        btnPrev.setEnabled(false);
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });

        pnlCards.setBackground(new java.awt.Color(255, 255, 255));
        pnlCards.setLayout(new java.awt.CardLayout());
        pnlCards.add(pnlSplash, "splashCard");
        pnlCards.add(pnlMySQL, "mySQLCard");
        pnlCards.add(pnlActiveMQ, "activeMQCard");
        pnlCards.add(pnlPladipus, "pladipusCard");

        pnlSteps.setBackground(new java.awt.Color(255, 255, 255));

        pnlDescription.setBackground(new java.awt.Color(255, 255, 255));

        spnlDescription.setBackground(new java.awt.Color(255, 255, 255));
        spnlDescription.setBorder(null);

        epDescription.setEditable(false);
        epDescription.setBorder(null);
        spnlDescription.setViewportView(epDescription);

        liSteps.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "-", "1. Installing MySQL", "2. Installing ActiveMQ", "3. Installing Pladipus" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        liSteps.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        liSteps.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        liSteps.setFocusable(false);
        liSteps.setRequestFocusEnabled(false);
        liSteps.setSelectionBackground(new java.awt.Color(0, 102, 204));
        liSteps.setVerifyInputWhenFocusTarget(false);

        javax.swing.GroupLayout pnlDescriptionLayout = new javax.swing.GroupLayout(pnlDescription);
        pnlDescription.setLayout(pnlDescriptionLayout);
        pnlDescriptionLayout.setHorizontalGroup(
            pnlDescriptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDescriptionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDescriptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spnlDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(liSteps))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        pnlDescriptionLayout.setVerticalGroup(
            pnlDescriptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDescriptionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(liSteps)
                .addGap(22, 22, 22)
                .addComponent(spnlDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlStepsLayout = new javax.swing.GroupLayout(pnlSteps);
        pnlSteps.setLayout(pnlStepsLayout);
        pnlStepsLayout.setHorizontalGroup(
            pnlStepsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStepsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlStepsLayout.setVerticalGroup(
            pnlStepsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlStepsLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(pnlDescription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlSteps, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                        .addComponent(btnPrev)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNext))
                    .addComponent(pnlCards, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pnlMainLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnNext, btnPrev});

        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlSteps, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlCards, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNext)
                    .addComponent(btnPrev))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showCard() {
        CardLayout card = (CardLayout) pnlCards.getLayout();
        String cardName = cards.get(cursor);
        card.show(pnlCards, cardName);
        setDescriptingText();
        if (cursor == cards.size()) {
            btnNext.setText("Finish");
        } else {
            btnNext.setText("Next");
        }
        if (cursor == 1) {
            btnPrev.setEnabled(false);
        } else {
            btnPrev.setEnabled(true);
        }
    }

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        if (cursor == cards.size()) {
            //then it's done
            System.exit(0);
        }
        cursor++;
        cursor = Math.min(cards.size(), cursor);
        showCard();
        if (cursor == 1) {
            btnPrev.setEnabled(false);
        } else if (cursor == cards.size()) {
            btnNext.setText("Finish");
        }
        btnPrev.setEnabled(true);
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        cursor--;
        cursor = Math.max(1, cursor);
        showCard();
        if (cursor == 1) {
            btnPrev.setEnabled(false);
        }
        btnNext.setText("Next");
    }//GEN-LAST:event_btnPrevActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InstallerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InstallerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InstallerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InstallerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                InstallerGUI installerGUI = new InstallerGUI();
                installerGUI.setLocationRelativeTo(null);
                installerGUI.setTitle("Pladipus Installation");
                installerGUI.setVisible(true);
            }
        });
    }

    private void setDescriptingText() {
        epDescription.setContentType("text/html");//set content as html
        liSteps.setSelectedIndex(cursor - 1);
        switch (cursor) {
            case 1:
                epDescription.setText("<h2>Welcome To Pladipus</h2>"
                        + "<br>"
                        + "Pladipus is a user friendly tool designed to manage distributed computational biology across a GRID of computers."
                        + "This wizard will guide you through the installation process."
                        + "<br><br>"
                        + "If any problem occurs, please visit the <a href='http://compomics.github.io/projects/pladipus.html'>website</a> for more help."
                        + "Additionally, you can contact the developers at <b>kenneth.verheggen@ugent.be</b> for more help"
                );
                break;
            case 2:
                epDescription.setText("<h2>Step 1 of 3 - MySQL</h2>"
                        + "<br>"
                        + "Pladipus requires a MySQL database in order to keep track of tasks and their states."
                        + "<br><br>"
                        + "By using the default settings you can easily connect and automatically import the Pladipus database scheme."
                        + "<br><br>"
                        + "If there is no MySQL service reachable, click <a href='https://github.com/compomics/pladipus/wiki/1.-Installation#Installing%20MySQL'>here</a> for more help."
                );
                break;
            case 3:
                epDescription.setText("<h2>Step 2 of 3 - ActiveMQ</h2>"
                        + "<br>"
                        + "Pladipus requires a running <a href='http://activemq.apache.org/'>ActiveMQ</a> server in order to distribute tasks and system updates."
                        + "<br><br>"
                        + "By using the default settings you can easily set up an ActiveMQ connection."
                        + "<br><br>"
                        + "If no ActiveMQ service is reachable, please click the install button to automatically set up a prepackaged version."
                        + "<br><br>"
                        + "Click <a href='https://github.com/compomics/pladipus/wiki/1.-Installation#Installing%20ActiveMQ'>here</a> for more help."
                );
                break;
            case 4:
                epDescription.setText("<h2>Step 3 of 3 - Pladipus</h2>"
                        + "<br>"
                        + "In order to submit and manage new tasks, you need a registered Pladipus account."
                        + "<br><br>"
                        + "Pladipus can be installed as: <br>"
                        + "<ul>"
                        + "<li>Manager - for managing tasks</li> "
                        + "<li>Worker - for executing tasks</li>"
                        + "</ul>"
                        + "It is also possible to automatically install <a href='http://www.ncbi.nlm.nih.gov/pubmed/21337703'>SearchGUI</a>, "
                        + "<a href='http://www.ncbi.nlm.nih.gov/pubmed/24295440'>DeNovoGUI</a> "
                        + "and <a href='http://www.ncbi.nlm.nih.gov/pubmed/25574629'>PeptideShaker</a> to quickly set up a demo worker."
                        + "<br><br>"
                        + "Click <a href='https://github.com/compomics/pladipus/wiki/1.-Installation'>here</a> for more help."
                );
                break;
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JEditorPane epDescription;
    private javax.swing.JList liSteps;
    private com.compomics.pladipus.view.ActiveMQPanel pnlActiveMQ;
    private javax.swing.JPanel pnlCards;
    private javax.swing.JPanel pnlDescription;
    private javax.swing.JPanel pnlMain;
    private com.compomics.pladipus.view.MySQLPanel pnlMySQL;
    private com.compomics.pladipus.view.PladipusPanel pnlPladipus;
    private com.compomics.pladipus.view.SplashPanel pnlSplash;
    private javax.swing.JPanel pnlSteps;
    private javax.swing.JScrollPane spnlDescription;
    // End of variables declaration//GEN-END:variables
}
