/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.compomics.pladipus.view;

import com.compomics.pladipus.controller.setup.InitMySQL;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Kenneth Verheggen
 */
public class MySQLPanel extends javax.swing.JPanel {

    /**
     * The mysql service address
     */
    private String host;
    /**
     * The mysql service port
     */
    private String port;
    /**
     * the login for the mysql service
     */
    private String user;
    /**
     * the password for the mysql service
     */
    private String password;
    /**
     * check if the database is existing
     */
    private boolean dbExists = false;
    /**
     * the mysql setup instance
     */
    private final InitMySQL mySQLSetup = new InitMySQL();

    public String getHost() {
        return host;
    }

    public String getPort() {
        return port;
    }

    public String getUser() {
        return user;
    }

    public String getPassword() {
        return password;
    }

    /**
     * Creates new form MySQLPanel
     */
    public MySQLPanel() {
        initComponents();
        ImageIcon image = new ImageIcon(
                getClass().getResource(
                        "/images/logo_mysql.png"));
        lbLogo.setText("");
        lbLogo.setIcon(image);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMain = new javax.swing.JPanel();
        lblHost = new javax.swing.JLabel();
        lblPort = new javax.swing.JLabel();
        lblUser = new javax.swing.JLabel();
        lblPass = new javax.swing.JLabel();
        tfHost = new javax.swing.JTextField();
        tfPort = new javax.swing.JTextField();
        tfUser = new javax.swing.JTextField();
        btnApply = new javax.swing.JButton();
        pfPass = new javax.swing.JPasswordField();
        btnInstallDatabase = new javax.swing.JButton();
        btnTestConnection = new javax.swing.JButton();
        lbLogo = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        pnlMain.setBackground(new java.awt.Color(255, 255, 255));

        lblHost.setBackground(new java.awt.Color(255, 255, 255));
        lblHost.setText("Host");

        lblPort.setBackground(new java.awt.Color(255, 255, 255));
        lblPort.setText("Port");

        lblUser.setBackground(new java.awt.Color(255, 255, 255));
        lblUser.setText("User");

        lblPass.setBackground(new java.awt.Color(255, 255, 255));
        lblPass.setText("Password");

        tfHost.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfHost.setText("localhost");
        tfHost.setToolTipText("This is the IP adress of the machine hosting the MySQL database");

        tfPort.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfPort.setText("3306");
        tfPort.setToolTipText("This is the open port of the host where the MySQL service is listening on ");

        tfUser.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfUser.setText("root");
        tfUser.setToolTipText("The user to the database with correct privileges");

        btnApply.setText("Save Settings");
        btnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyActionPerformed(evt);
            }
        });

        pfPass.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        pfPass.setToolTipText("The password for the user");

        btnInstallDatabase.setText("Import Db");
        btnInstallDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInstallDatabaseActionPerformed(evt);
            }
        });

        btnTestConnection.setText("Test Connection");
        btnTestConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestConnectionActionPerformed(evt);
            }
        });

        lbLogo.setBackground(new java.awt.Color(255, 255, 255));
        lbLogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbLogo.setText("jLabel1");

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addComponent(lblHost, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfHost))
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPort, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUser, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfUser)
                            .addComponent(tfPort)))
                    .addComponent(lbLogo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addComponent(lblPass, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnTestConnection, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(pnlMainLayout.createSequentialGroup()
                                .addComponent(btnInstallDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnApply, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE))
                            .addComponent(pfPass))))
                .addContainerGap())
        );

        pnlMainLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblHost, lblPass, lblPort, lblUser});

        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addComponent(lbLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHost)
                    .addComponent(tfHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPort)
                    .addComponent(tfPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUser)
                    .addComponent(tfUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPass)
                    .addComponent(pfPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInstallDatabase)
                    .addComponent(btnApply))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTestConnection)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyActionPerformed
        testConnection(true);
        try {
            mySQLSetup.updateProperties(host, port, user, password);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this,
                    "Could not update properties.",
                    "Update Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnApplyActionPerformed

    private void btnInstallDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInstallDatabaseActionPerformed
        loadInput();
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://" + host + ":" + port, user, password)) {
            if (mySQLSetup.pladipusExists(connection)) {
                int answer = JOptionPane.showConfirmDialog(this, "The database already exists. Would you like to perform a clean install?");
                if (answer == JOptionPane.YES_OPTION) {
                    answer = JOptionPane.showConfirmDialog(this, "Are you sure? This action can not be undone?");
                    if (answer == JOptionPane.YES_OPTION) {
                        mySQLSetup.dropPladipus(connection);
                    } else {
                        return;
                    }
                }else{
                    return;
                }
            }
            mySQLSetup.setupMySql(connection);
            if(mySQLSetup.pladipusExists(connection)){
            JOptionPane.showMessageDialog(null, "Succesfully initiated database.");
            dbExists = true;
            }else{
                throw new IOException("Could not create database schema. Are the privileges set correctly for the specified account?");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                    "Could not connect to the database: " + System.lineSeparator() + ex.getMessage(),
                    "Connection Failed",
                    JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
            dbExists = true;
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this,
                    "Could not import the database: " + System.lineSeparator() + ex.getMessage(),
                    "Import Failed",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnInstallDatabaseActionPerformed

    private void btnTestConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestConnectionActionPerformed
        testConnection(false);
    }//GEN-LAST:event_btnTestConnectionActionPerformed

    private void loadInput() {
        host = tfHost.getText();
        port = tfPort.getText();
        user = tfUser.getText();
        password = new String(pfPass.getPassword());
    }

    private void testConnection(boolean save) {
        loadInput();
        System.out.println("Connecting to database...");
        //1. check if db exists
        boolean connected = false;
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://" + host + ":" + port, user, password)) {
            connected = true;
            try {
                dbExists = mySQLSetup.pladipusExists(connection);
                if (dbExists) {
                    if (save) {
                        mySQLSetup.updateProperties(host, port, user, password);
                        JOptionPane.showMessageDialog(this, "Succesfully saved database settings.");
                    } else {
                        JOptionPane.showMessageDialog(this, "Succesfully contacted the Pladipus database.");
                    }
                }
            } catch (SQLException theDatabaseIsNotThere) {
                if (connected) {
                    //2. prompt user if he/she wants to attempt to initialize the database?
                    int dialogResult = JOptionPane.showConfirmDialog(this, "Would you like to automatically import the Pladipus database?");
                    if (dialogResult == JOptionPane.YES_OPTION) {
                        mySQLSetup.setupMySql(connection);
                        JOptionPane.showMessageDialog(null, "Succesfully initiated database.");
                        dbExists = true;
                    }
                }
            }
        } catch (SQLException e) {
            if (!connected) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this,
                        "Could not connect to the database: " + System.lineSeparator() + e.getMessage(),
                        "Connection Failed",
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException ex) {
            //custom title, error icon
            JOptionPane.showMessageDialog(this,
                    "Could not import SQL init script.",
                    "Database Creation Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApply;
    private javax.swing.JButton btnInstallDatabase;
    private javax.swing.JButton btnTestConnection;
    private javax.swing.JLabel lbLogo;
    private javax.swing.JLabel lblHost;
    private javax.swing.JLabel lblPass;
    private javax.swing.JLabel lblPort;
    private javax.swing.JLabel lblUser;
    private javax.swing.JPasswordField pfPass;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JTextField tfHost;
    private javax.swing.JTextField tfPort;
    private javax.swing.JTextField tfUser;
    // End of variables declaration//GEN-END:variables
}
