/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.compomics.pladipus.view.dialogs.management;

import com.compomics.pladipus.core.model.properties.PladipusProperties;
import java.io.FileWriter;
import java.io.IOException;
import java.util.TreeMap;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Kenneth Verheggen
 */
public class ConfigurationDialog extends javax.swing.JDialog {

    /**
     * Properties instance
     */
    private PladipusProperties properties;

    /**
     * Creates new form NetworkConfigurationDialog
     */
    public ConfigurationDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        // try to set the look and feel
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception e) {
            // ignore error, use default look and feel
        }
    }

    /**
     * Sets the properties to display
     */
    public void setProperties(PladipusProperties properties) {
        this.properties = properties;
        initComponents();
        spTable.getViewport().setOpaque(false);
        loadPropertiesInTable();
    }

    private void loadPropertiesInTable() {
        DefaultTableModel model = (DefaultTableModel) tblProperties.getModel();
        model.setRowCount(0);
        //sort first?
        TreeMap<String, String> sortedParameterMap = new TreeMap<>();
        properties.entrySet().stream().forEach((aParameter) -> {
            sortedParameterMap.put(String.valueOf(aParameter.getKey()), String.valueOf(aParameter.getValue()));
        });

        sortedParameterMap.entrySet().stream().forEach((aParameter) -> {
            model.addRow(new Object[]{aParameter.getKey(), aParameter.getValue()});
        });
        tblProperties.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMain = new javax.swing.JPanel();
        spTable = new javax.swing.JScrollPane();
        tblProperties = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnlMain.setBackground(new java.awt.Color(255, 255, 255));

        spTable.setBackground(new java.awt.Color(255, 255, 255));
        spTable.setBorder(null);
        spTable.setOpaque(false);

        tblProperties.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Parameter", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblProperties.setColumnSelectionAllowed(true);
        tblProperties.setOpaque(false);
        tblProperties.getTableHeader().setReorderingAllowed(false);
        spTable.setViewportView(tblProperties);
        tblProperties.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        btnSave.setText("Apply");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spTable)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSave)
                .addContainerGap())
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addComponent(spTable, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSave))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        //get all the values from the table model and chuck them in a properties object
        DefaultTableModel model = (DefaultTableModel) tblProperties.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            String key = String.valueOf(model.getValueAt(i, 0));
            String value = String.valueOf(model.getValueAt(i, 1));
            properties.setProperty(key, value);
        }
        try {
            properties.store(new FileWriter(properties.getPropertiesFile()), null);
            JOptionPane.showMessageDialog(this,
                    "Saving successful",
                    "Updated properties",
                    JOptionPane.INFORMATION_MESSAGE
            );

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this,
                    "Could not save the properties file ; " + System.lineSeparator() + ex,
                    "Inane error",
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            this.setVisible(false);
            this.dispose();
        }
    }//GEN-LAST:event_btnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JScrollPane spTable;
    private javax.swing.JTable tblProperties;
    // End of variables declaration//GEN-END:variables
}
