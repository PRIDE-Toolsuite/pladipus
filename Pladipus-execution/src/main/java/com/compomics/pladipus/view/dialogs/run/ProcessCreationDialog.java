
package com.compomics.pladipus.view.dialogs.run;

import com.compomics.pladipus.core.control.distribution.service.database.dao.impl.RunDAO;
import com.compomics.pladipus.core.model.processing.templates.PladipusProcessingTemplate;
import java.awt.Toolkit;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Kenneth
 */
public class ProcessCreationDialog extends javax.swing.JDialog {

    /**
     * The template to create a job from
     */
    private final PladipusProcessingTemplate template;

    /**
     * Creates new form ProcessCreationDialog
     */
    public ProcessCreationDialog(java.awt.Frame parent, boolean modal, PladipusProcessingTemplate template) {
        super(parent, modal);
        this.template = template;
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/pladipus_icon.gif")));
        initTable();
        spnlParameters.getViewport().setOpaque(false);
    }

    private void initTable() {
                //load the job parameters in the jTable
        DefaultTableModel model = (DefaultTableModel) tblParameters.getModel();;
        for (String aParameterName : template.getJobParameters().keySet()) {
            System.out.println(aParameterName);
            model.addRow(new String[]{aParameterName, ""});
        }
        tblParameters.setModel(model);
        tblParameters.repaint();
        tblParameters.addKeyListener(new KeyAdapter() {
            private int row;
            @Override
            public void keyReleased(KeyEvent e) {
                int maxRows = tblParameters.getModel().getRowCount();
                if (e.getKeyCode() == KeyEvent.VK_TAB) {
                    row = tblParameters.getSelectedRow();
                    while (tblParameters.isCellEditable(row, 1) == false) {
                        if (row == maxRows) {
                            row = 0;
                        }
                        row++;
                    }
                    tblParameters.editCellAt(row, 1);
                    tblParameters.requestFocusInWindow();

                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMain = new javax.swing.JPanel();
        btnCreate = new javax.swing.JButton();
        parametersPanel = new javax.swing.JPanel();
        spnlParameters = new javax.swing.JScrollPane();
        tblParameters = new javax.swing.JTable();
        mnBar = new javax.swing.JMenuBar();
        miFile = new javax.swing.JMenu();
        miImport = new javax.swing.JMenuItem();
        miExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Processing Parameters");

        pnlMain.setBackground(new java.awt.Color(230, 230, 230));

        btnCreate.setBackground(java.awt.Color.white);
        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        parametersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameters"));
        parametersPanel.setOpaque(false);

        spnlParameters.setBackground(new java.awt.Color(255, 255, 255));
        spnlParameters.setOpaque(false);

        tblParameters.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Parameter", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblParameters.setOpaque(false);
        tblParameters.setSelectionBackground(new java.awt.Color(255, 255, 255));
        spnlParameters.setViewportView(tblParameters);

        javax.swing.GroupLayout parametersPanelLayout = new javax.swing.GroupLayout(parametersPanel);
        parametersPanel.setLayout(parametersPanelLayout);
        parametersPanelLayout.setHorizontalGroup(
            parametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parametersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spnlParameters)
                .addContainerGap())
        );
        parametersPanelLayout.setVerticalGroup(
            parametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parametersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spnlParameters, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                        .addGap(0, 551, Short.MAX_VALUE)
                        .addComponent(btnCreate))
                    .addComponent(parametersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(parametersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCreate)
                .addContainerGap())
        );

        miFile.setText("File");

        miImport.setText("Import Job(s)...");
        miImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miImportActionPerformed(evt);
            }
        });
        miFile.add(miImport);

        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        miFile.add(miExit);

        mnBar.add(miFile);

        setJMenuBar(mnBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        try {
            HashMap<String, String> parameterMap = readParametersFromTable();
            RunDAO rDAO = RunDAO.getInstance();
            int runID = rDAO.getRunID(template.getName(), template.getUser());
            rDAO.addToRun(runID, parameterMap);
            this.dispose();
        } catch (SQLException ex) {
            Logger.getLogger(ProcessCreationDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void miImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miImportActionPerformed
        ProcessImportDialog dialog = new ProcessImportDialog(this, true);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }//GEN-LAST:event_miImportActionPerformed

    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        dispose();
    }//GEN-LAST:event_miExitActionPerformed

    private HashMap<String, String> readParametersFromTable() {
        HashMap<String, String> parameterMap = new HashMap<>();
        DefaultTableModel model = (DefaultTableModel) tblParameters.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            parameterMap.put(String.valueOf(model.getValueAt(i, 0)), String.valueOf(model.getValueAt(i, 1)));
        }
        return parameterMap;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreate;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenu miFile;
    private javax.swing.JMenuItem miImport;
    private javax.swing.JMenuBar mnBar;
    private javax.swing.JPanel parametersPanel;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JScrollPane spnlParameters;
    private javax.swing.JTable tblParameters;
    // End of variables declaration//GEN-END:variables
}
