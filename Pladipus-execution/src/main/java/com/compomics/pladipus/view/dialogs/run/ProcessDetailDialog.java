/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.compomics.pladipus.view.dialogs.run;

import com.compomics.pladipus.core.control.distribution.service.ProcessService;
import com.compomics.pladipus.core.control.distribution.service.RunService;
import com.compomics.pladipus.core.control.distribution.service.queue.jmx.operation.impl.CreateOperation;
import com.compomics.pladipus.core.model.processing.ProcessingJob;
import com.compomics.pladipus.core.model.processing.templates.PladipusProcessingTemplate;
import com.compomics.pladipus.core.model.queue.CompomicsQueue;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Kenneth Verheggen
 */
public class ProcessDetailDialog extends javax.swing.JDialog {

    /**
     * the current processID
     */
    private final int processID;
    /**
     * the processing job
     */
    private ProcessingJob processingJob;
    /**
     * boolean to check if this process has already been run before
     * (successfully)
     */
    private boolean completedProcess;

    /**
     * Creates new form ProcessDetailDialog
     */
    public ProcessDetailDialog(java.awt.Frame parent, boolean modal, int processID) {
        super(parent, modal);
        this.processID = processID;

        // try to set the look and feel
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception e) {
            // ignore error, use default look and feel
        }

        initComponents();
        initTable();
        spnlRun.getViewport().setOpaque(false);
        spnlJob.getViewport().setOpaque(false);
    }

    private void initTable() {
        try {
            ProcessService pService = ProcessService.getInstance();
            RunService rService = RunService.getInstance();
            //get the actual job
            processingJob = pService.getProcessingJob(processID);
            completedProcess = pService.isCompletedProcess(processID);
            tblRunParameter.setEnabled(false);
            if (completedProcess) {
                tblJobParameter.setEnabled(false);
            }
            HashMap<String, String> processingParameters = processingJob.getProcessingParameters();
            //get the run specific parameters
            PladipusProcessingTemplate templateForRun = rService.getTemplateForRun(pService.getParentRunID(processID));

            DefaultTableModel runParameterModel = (DefaultTableModel) tblRunParameter.getModel();
            DefaultTableModel jobParameterModel = (DefaultTableModel) tblJobParameter.getModel();

            runParameterModel.setRowCount(0);
            jobParameterModel.setRowCount(0);

            for (Map.Entry<String, String> aProcessingParameter : processingParameters.entrySet()) {
                String key = aProcessingParameter.getKey();
                DefaultTableModel model;
                if (templateForRun.getRunParameters().keySet().contains(key)) {
                    model = runParameterModel;
                } else {
                    model = jobParameterModel;
                }
                model.addRow(new String[]{aProcessingParameter.getKey(), aProcessingParameter.getValue()});

            }
            //update the models?
            tblRunParameter.setModel(runParameterModel);
            tblJobParameter.setModel(jobParameterModel);

        } catch (Exception ex) {
            Logger.getLogger(ProcessDetailDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMain = new javax.swing.JPanel();
        spnlRun = new javax.swing.JScrollPane();
        tblRunParameter = new javax.swing.JTable();
        spnlJob = new javax.swing.JScrollPane();
        tblJobParameter = new javax.swing.JTable();
        btnOk = new javax.swing.JButton();
        lbRemark = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnlMain.setBackground(new java.awt.Color(255, 255, 255));

        spnlRun.setBackground(new java.awt.Color(255, 255, 255));
        spnlRun.setBorder(javax.swing.BorderFactory.createTitledBorder("Run Parameters *"));
        spnlRun.setOpaque(false);

        tblRunParameter.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Parameter", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spnlRun.setViewportView(tblRunParameter);

        spnlJob.setBackground(new java.awt.Color(255, 255, 255));
        spnlJob.setBorder(javax.swing.BorderFactory.createTitledBorder("Job Parameters"));
        spnlJob.setOpaque(false);

        tblJobParameter.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Parameter", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblJobParameter.setOpaque(false);
        spnlJob.setViewportView(tblJobParameter);

        btnOk.setText("OK");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        lbRemark.setText("* Run Parameters are not editable. This is a countermeasure to concurrency issues.");

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spnlJob)
                    .addComponent(spnlRun, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                        .addComponent(lbRemark)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 255, Short.MAX_VALUE)
                        .addComponent(btnOk)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel)))
                .addContainerGap())
        );

        pnlMainLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCancel, btnOk});

        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spnlRun, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(spnlJob, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOk)
                    .addComponent(lbRemark)
                    .addComponent(btnCancel))
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        HashMap<String, String> extractParametersFromJTable = extractParametersFromJTable(tblJobParameter);
        if (!completedProcess && !extractParametersFromJTable.equals(processingJob.getProcessingParameters())) {
            int reply = JOptionPane.showConfirmDialog(this, "Are you sure you want to apply changes to this process?", "Confirmation required", JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) {
                updateJob(extractParametersFromJTable);
            }
        } else {
            this.dispose();
        }
    }//GEN-LAST:event_btnOkActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private boolean updateJob(HashMap<String, String> newParameters) {
        try {
            //rebuild the object, delete it from the queue and put it back on?
            //only the variable ones
            HashMap<String, String> processingParameters = processingJob.getProcessingParameters();
            //override
            processingParameters.putAll(newParameters);

            processingJob.setProcessingParameters(processingParameters);
            processingJob.toXML();
            //check with the template because run parameters are immutable and throw errors
            RunService rInstance = RunService.getInstance();
            Integer runID = rInstance.getRunID(processingJob.getRun(), processingJob.getUser());
            PladipusProcessingTemplate template = rInstance.getTemplateForRun(runID);
            for (String runParameter : template.getRunParameters().keySet()) {
                processingParameters.remove(runParameter);
            }
            //delete from DB and QUEUE
            ProcessService instance = ProcessService.getInstance();
            instance.removeProcess(processID, false);
            //Recreate on queue
            CreateOperation operation = new CreateOperation();
            operation.addJobToQueue(CompomicsQueue.JOB, processingJob.toXML(), processID);
            //also needs to be put in the db again?
            instance.updateProcessParameters(processID, processingParameters);
            return true;
        } catch (Exception ex) {
            Logger.getLogger(ProcessDetailDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;

    }

    private HashMap<String, String> extractParametersFromJTable(JTable table) {
        HashMap<String, String> parameters = new HashMap<>();
        for (int row = 0; row < table.getRowCount(); row++) {
            parameters.put(String.valueOf(table.getValueAt(row, 0)),
                    String.valueOf(table.getValueAt(row, 1)));
        }
        return parameters;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.JLabel lbRemark;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JScrollPane spnlJob;
    private javax.swing.JScrollPane spnlRun;
    private javax.swing.JTable tblJobParameter;
    private javax.swing.JTable tblRunParameter;
    // End of variables declaration//GEN-END:variables
}
