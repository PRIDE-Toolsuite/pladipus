package com.compomics.pladipus.view;

import com.compomics.pladipus.core.control.distribution.communication.interpreter.impl.XMLTemplateInterpreter;
import com.compomics.pladipus.core.control.distribution.service.UserService;
import com.compomics.pladipus.core.control.runtime.steploader.StepLoadingException;
import com.compomics.pladipus.core.model.processing.templates.PladipusProcessingTemplate;
import com.compomics.pladipus.core.model.properties.NetworkProperties;
import com.compomics.pladipus.core.model.properties.PladipusProperties;
import com.compomics.pladipus.util.JobAttacher;
import com.compomics.pladipus.util.RunUploader;
import com.compomics.pladipus.view.dialogs.LoginDialog;
import com.compomics.pladipus.view.dialogs.management.ConfigurationDialog;
import com.compomics.pladipus.view.dialogs.run.RunCreationDialog;
import com.compomics.pladipus.view.dialogs.run.RunImportDialog;
import com.compomics.pladipus.view.dialogs.user.UserUpdateDialog;
import com.compomics.pladipus.view.panels.UpdatingPanel;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.xml.parsers.ParserConfigurationException;
import org.apache.commons.io.IOUtils;
import org.xml.sax.SAXException;

/**
 *
 * @author Kenneth Verheggen
 */
public class MainGUI extends javax.swing.JFrame {

    /**
     * The panels and their names for the mainGUI
     */
    HashMap<String, UpdatingPanel> panelMap = new HashMap<>();
    /**
     * the current user
     */
    private String loggedInUser;
    /**
     * verify the user had admin rights
     */
    private boolean isAdmin;

    /**
     * Creates new form MainGUI
     */
    public MainGUI() {
        // try to set the look and feel
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception e) {
            // ignore error, use default look and feel
        }

        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/pladipus_icon.gif")));

        //show the login dialog
        LoginDialog loginDialog = new LoginDialog(null, true);
        loginDialog.setLocationRelativeTo(null);
        loginDialog.setVisible(true);

        if (loginDialog.isAuthorised()) {
            this.loggedInUser = loginDialog.getUser();
            setTitle("Pladipus - " + loggedInUser);
            UserService service = UserService.getInstance();
            int userRole = 2;
            try {
                userRole = service.getUserRoles(loggedInUser);
            } catch (SQLException ex) {
                //log
            }
            isAdmin = userRole == 1;
            init();
        } else {
            loginDialog.setVisible(true);
        }
    }

    private void initConfigurationDialog(PladipusProperties properties) {
        ConfigurationDialog configurationDialog = new ConfigurationDialog(this, true);
        configurationDialog.setProperties(properties);
        configurationDialog.setLocationRelativeTo(this);
        configurationDialog.setVisible(true);
    }

    private void init() {
        initComponents();
        if (!isAdmin) {
            miLaunchAdmin.setEnabled(false);
            miLaunchAdmin.setVisible(false);
        }
        userPanel.setUser(loggedInUser);
        userPanel.activate();
        //add listener to the tabbed pane
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userPanel = new com.compomics.pladipus.view.panels.impl.UserPanel();
        mnbMain = new javax.swing.JMenuBar();
        miFile = new javax.swing.JMenu();
        miCreateRun = new javax.swing.JMenuItem();
        miImportRun = new javax.swing.JMenuItem();
        miImportJobs = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        miExit = new javax.swing.JMenuItem();
        miEdit = new javax.swing.JMenu();
        miAccountSettings = new javax.swing.JMenuItem();
        miPladipusSettings = new javax.swing.JMenuItem();
        miLaunchAdmin = new javax.swing.JMenuItem();
        miHelp = new javax.swing.JMenu();
        helpMenuItem = new javax.swing.JMenuItem();
        exampleMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        miFile.setMnemonic('F');
        miFile.setText("File");

        miCreateRun.setMnemonic('N');
        miCreateRun.setText("New Run...");
        miCreateRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCreateRunActionPerformed(evt);
            }
        });
        miFile.add(miCreateRun);

        miImportRun.setMnemonic('I');
        miImportRun.setText("Import Run...");
        miImportRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miImportRunActionPerformed(evt);
            }
        });
        miFile.add(miImportRun);

        miImportJobs.setMnemonic('I');
        miImportJobs.setText("Import Job(s)...");
        miImportJobs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miImportJobsActionPerformed(evt);
            }
        });
        miFile.add(miImportJobs);
        miFile.add(jSeparator1);

        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        miFile.add(miExit);

        mnbMain.add(miFile);

        miEdit.setMnemonic('E');
        miEdit.setText("Edit");

        miAccountSettings.setMnemonic('A');
        miAccountSettings.setText("Account Details");
        miAccountSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAccountSettingsActionPerformed(evt);
            }
        });
        miEdit.add(miAccountSettings);

        miPladipusSettings.setMnemonic('N');
        miPladipusSettings.setText("Network Settings");
        miPladipusSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miPladipusSettingsActionPerformed(evt);
            }
        });
        miEdit.add(miPladipusSettings);

        miLaunchAdmin.setMnemonic('M');
        miLaunchAdmin.setText("Admin Settings");
        miLaunchAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miLaunchAdminActionPerformed(evt);
            }
        });
        miEdit.add(miLaunchAdmin);

        mnbMain.add(miEdit);

        miHelp.setMnemonic('H');
        miHelp.setText("Help");

        helpMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        helpMenuItem.setMnemonic('H');
        helpMenuItem.setText("Help");
        helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuItemActionPerformed(evt);
            }
        });
        miHelp.add(helpMenuItem);

        exampleMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F10, 0));
        exampleMenuItem.setMnemonic('H');
        exampleMenuItem.setText("Load example run...");
        exampleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exampleMenuItemActionPerformed(evt);
            }
        });
        miHelp.add(exampleMenuItem);

        mnbMain.add(miHelp);

        setJMenuBar(mnbMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(userPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(userPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miImportRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miImportRunActionPerformed
        RunImportDialog runImportDialog = new RunImportDialog(this, userPanel, true);
        runImportDialog.setUser(loggedInUser);
        runImportDialog.setLocationRelativeTo(this);
        runImportDialog.setVisible(true);
    }//GEN-LAST:event_miImportRunActionPerformed

    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_miExitActionPerformed

    private void miAccountSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAccountSettingsActionPerformed
        UserUpdateDialog userUpdateDialog = new UserUpdateDialog(this, true, loggedInUser);
        userUpdateDialog.setLocationRelativeTo(this);
        userUpdateDialog.setVisible(true);
    }//GEN-LAST:event_miAccountSettingsActionPerformed

    private void miPladipusSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miPladipusSettingsActionPerformed
        initConfigurationDialog(NetworkProperties.getInstance());
    }//GEN-LAST:event_miPladipusSettingsActionPerformed

    private void miLaunchAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miLaunchAdminActionPerformed
        if (isAdmin) {
            AdminConsole adminConsole = new AdminConsole(loggedInUser);
            adminConsole.setLocationRelativeTo(this);
            adminConsole.setVisible(true);
        } else {

        }
    }//GEN-LAST:event_miLaunchAdminActionPerformed

    private void miCreateRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miCreateRunActionPerformed
        try {
            RunCreationDialog dialog = new RunCreationDialog(this, loggedInUser, true);
            dialog.setLocationRelativeTo(this);
            dialog.setVisible(true);
        } catch (NullPointerException | ParserConfigurationException | IOException | SAXException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred loading a preset template: " + e.getMessage(), "Template Error", JOptionPane.ERROR_MESSAGE);
            //this.dispose();
        } finally {
            try {
                userPanel.updateProcessTable();
                userPanel.updateRunTable();
            } catch (Exception ex) {
                ex.printStackTrace();
                //ignore for now...
            }
        }
    }//GEN-LAST:event_miCreateRunActionPerformed

    private void helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuItemActionPerformed
        try {
            Desktop.getDesktop().browse(new URI("http://compomics.github.io/pladipus/wiki/home.html"));
        } catch (URISyntaxException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_helpMenuItemActionPerformed

    private void miImportJobsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miImportJobsActionPerformed
        JobAttacher.queryUserForJobs(userPanel);
    }//GEN-LAST:event_miImportJobsActionPerformed

    private PladipusProcessingTemplate getTemplateFromResource() throws IOException, ParserConfigurationException, StepLoadingException, SAXException {
        try (StringWriter writer = new StringWriter();
                InputStream inputStream = getClass().getClassLoader().getResource("example/example_template.xml").openStream()) {
            IOUtils.copy(inputStream, writer);
            return XMLTemplateInterpreter.getInstance().convertXMLtoTemplate(writer.toString());
        }
    }

    private File overrideOutputFolder(String outputFolderPath) throws IOException {
        File temp = File.createTempFile("example_", "temp.tsv");
        try (FileWriter writer = new FileWriter(temp); BufferedReader br = new BufferedReader(new InputStreamReader(getClass().getClassLoader().getResource("example/example_configuration.tsv").openStream()))) {
            String line;
            //write headers
            writer.append(br.readLine()).append(System.lineSeparator()).flush();
            while ((line = br.readLine()) != null) {
                String[] split = line.split("\t");
                String outputAddress = outputFolderPath + "/" + new File(split[4]).getName();
                writer.append(line.replace(split[4], outputAddress)).append(System.lineSeparator()).flush();
            }
        }
        return temp;
    }


    private void exampleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exampleMenuItemActionPerformed
        try {
            //Custom button text
            Object[] options = {"Run distributed",
                "Run locally",};
            int n = JOptionPane.showOptionDialog(this,
                    "This option will load an example run."
                    + "A result folder needs to be specified. " + System.lineSeparator() + "/"
                    + "It is crucial that this folder is correct and can be reached the entire network!",
                    "Launch an example",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[1]);
            String newOutputParentPath = "";
            if (n > -1) {
                //load the template from the user_file to set the output folders?
                PladipusProcessingTemplate template = getTemplateFromResource();
                template.setUser(loggedInUser);
                template.setName("Example Run(" + new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Timestamp(System.currentTimeMillis())) + ")");
                if (n == 1) {
                    JFileChooser fc = new JFileChooser();
                    fc.setMultiSelectionEnabled(false);
                    fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                    fc.setCurrentDirectory(new File(System.getProperty("user.home")));
                    int returnVal = fc.showOpenDialog(this);
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        newOutputParentPath = fc.getSelectedFile().getAbsolutePath();

                    } else {
                        return;
                    }
                } else {
                    newOutputParentPath = JOptionPane.showInputDialog(this, "Please provide the (network) path that can be seen from all workers");
                }
                if (newOutputParentPath != null && !newOutputParentPath.isEmpty()) {
                    File newConfig = overrideOutputFolder(newOutputParentPath);
                    RunUploader.executeUpload(template, newConfig, userPanel);
                    JOptionPane.showMessageDialog(this,
                            "To start the run, select the run in the upper panel, right click and \"start run\"",
                            "The run was succesfully posted. ", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_exampleMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem exampleMenuItem;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem miAccountSettings;
    private javax.swing.JMenuItem miCreateRun;
    private javax.swing.JMenu miEdit;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenu miFile;
    private javax.swing.JMenu miHelp;
    private javax.swing.JMenuItem miImportJobs;
    private javax.swing.JMenuItem miImportRun;
    private javax.swing.JMenuItem miLaunchAdmin;
    private javax.swing.JMenuItem miPladipusSettings;
    private javax.swing.JMenuBar mnbMain;
    private com.compomics.pladipus.view.panels.impl.UserPanel userPanel;
    // End of variables declaration//GEN-END:variables
}
